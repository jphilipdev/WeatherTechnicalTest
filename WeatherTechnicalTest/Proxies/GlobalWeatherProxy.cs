using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Xml.Serialization;
using WeatherTechnicalTest.Models;
using WeatherTechnicalTest.Proxies.Interfaces;

namespace WeatherTechnicalTest.Proxies
{
    public class GlobalWeatherProxy : IGlobalWeatherProxy
    {
        private static HttpClient HttpClient = new HttpClient();
        private readonly string _baseAddress;

        public GlobalWeatherProxy(IConfiguration configuration)
        {
            _baseAddress = configuration.GetValue<string>("EndPoints:GlobalWeather");
        }

        public async Task<IReadOnlyList<string>> GetCitiesByCountry(string country)
        {
            // for some reason the result returned by the generated proxy can't be deserialised (this also failed when deserialising to the classes generated by xsd.exe in Cities2.cs):
            // InvalidOperationException: <NewDataSet xmlns=''> was not expected.

            //var client = new GlobalWeather.GlobalWeatherSoapClient(new GlobalWeather.GlobalWeatherSoapClient.EndpointConfiguration());
            //var cities = await client.GetCitiesByCountryAsync(country);

            //var ser = new XmlSerializer(typeof(Models.NewDataSet));
            //using (var reader = new StringReader(cities))
            //{
            //    var result = (Models.NewDataSet)ser.Deserialize(reader);
            //}



            // so had to fall back to using HttpClient and using HtmlDecode before deserialising

            var result = await Get<Models.String>($"globalweather.asmx/GetCitiesByCountry?CountryName={country}");
            return result.NewDataSet.Table.Select(p => p.City).ToList();
        }

        public Task<Weather> GetWeatherByCountryAndCity(string country, string city)
        {
            // the globalweather.asmx endpoint didn't return any results, e.g. http://www.webservicex.net/globalweather.asmx/GetWeather?CityName=Derby&CountryName=Australia
            // the alternative openweathermap endpoint returned a 401
            // so had to use mocked data

            //var result = await Get<Weather>($"globalweather.asmx/GetWeather?CountryName={country}&CityName={city}");
            //return result;

            return Task.FromResult(new Weather("Sunny Sydney", DateTime.Now, "40mph NE", "good", "clear", 24.8, 6.2, 75, 1123));
        }

        private async Task<T> Get<T>(string relativeUri)
        {
            var cities = await HttpClient.GetAsync($"{_baseAddress}/{relativeUri}");
            var responseBody = await cities.Content.ReadAsStringAsync();
            var decodedResponse = WebUtility.HtmlDecode(responseBody);

            var serialiser = new XmlSerializer(typeof(T));
            using (var reader = new StringReader(decodedResponse))
            {
                var result = (T)serialiser.Deserialize(reader);
                return result;
            }
        }
    }
}
