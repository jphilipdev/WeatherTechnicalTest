using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Xml.Serialization;
using WeatherTechnicalTest.Proxies.Interfaces;

namespace WeatherTechnicalTest.Proxies
{
    public class GlobalWeatherProxy : IGlobalWeatherProxy
    {
        private static HttpClient HttpClient = new HttpClient();
        private readonly string _baseAddress;

        public GlobalWeatherProxy(IConfiguration configuration)
        {
            _baseAddress = configuration.GetValue<string>("EndPoints:GlobalWeather");
        }

        public async Task<IReadOnlyList<string>> GetCitiesByCountry(string country)
        {
            // for some reason the result returned by the generated proxy can't be deserialised (this also failed when deserialising to the classes generated by xsd.exe in Cities2.cs):
            // InvalidOperationException: <NewDataSet xmlns=''> was not expected.

            //var client = new GlobalWeather.GlobalWeatherSoapClient(new GlobalWeather.GlobalWeatherSoapClient.EndpointConfiguration());
            //var cities = await client.GetCitiesByCountryAsync(country);

            //var ser = new XmlSerializer(typeof(Models.NewDataSet));
            //using (var reader = new StringReader(cities))
            //{
            //    var result = (Models.NewDataSet)ser.Deserialize(reader);
            //}



            // so had to fall back to using HttpClient and using HtmlDecode before deserialising

            var cities = await HttpClient.GetAsync($"{_baseAddress}/globalweather.asmx/GetCitiesByCountry?CountryName={country}");
            var responseBody = await cities.Content.ReadAsStringAsync();
            var decodedResponse = WebUtility.HtmlDecode(responseBody);

            var serialiser = new XmlSerializer(typeof(Models.String));
            using (var reader = new StringReader(decodedResponse))
            {
                var result = (Models.String)serialiser.Deserialize(reader);
                return result.NewDataSet.Table.Select(p => p.City).ToList();
            }
        }

        public Task<IReadOnlyList<string>> GetWeatherByCountryAndCity(string country, string city)
        {
            throw new NotImplementedException();
        }
    }
}
